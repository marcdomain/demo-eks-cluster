name: "EKS Cluster Pipeline"

on:
  pull_request:
  push:
    branches: [ main, production ]

env:
  AWS_REGION: 'eu-central-1'
  CLUSTER_NAME: 'marcus-eks-cluster'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET }}

jobs:
  terraform-infra-setup:
    name: PROVISION EKS CLUSTER
    runs-on: ubuntu-latest
    outputs:
      CURRENT_ENVIRONMENT: ${{ steps.envVars.outputs.ENVIRONMENT }}
      AWS_ACCOUNT_ID: ${{ steps.envVars.outputs.aws_account_number }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Environment Variable
        uses: marcdomain/set-variables@v1
        with:
          variables: |
            ENVIRONMENT: "${{ github.ref }}" == "refs/heads/main" ? "dev" : "production"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.6

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Set Terraform Workspace
        id: set_workspace
        run: |
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file tf_envs/${{ env.ENVIRONMENT }}.tfvars -out tf.tfplan -input=false
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Apply Infrastructure Changes
        if: github.ref == 'refs/heads/main' || 'refs/heads/production' && github.event_name == 'push'
        run: |
          terraform apply -input=false -auto-approve "tf.tfplan"

      - name: Export Output Variables
        id: envVars
        run: |
          echo "$(terraform output | sed 's/ //g' | sed 's/ /\n/g')" >> "$GITHUB_OUTPUT"
          echo "ENVIRONMENT=${{ env.environment }}" >> "$GITHUB_OUTPUT"

  applyManifests:
    name: APPLY MANIFESTS
    needs: terraform-infra-setup
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || 'refs/heads/production' && github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Apply k8s Manifests
        run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.CLUSTER_NAME }} --kubeconfig kubeconfig
          export KUBECONFIG="./kubeconfig"
          kubectl apply -f k8s/manifest-files
